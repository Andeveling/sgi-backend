generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  cellphone     String         @unique
  password      String
  roles         Role[]         @default([USER])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[] // Este campo es para las notificaciones de usuarios al inicio es un array vacio
  storeId       String?
  store         Store?         @relation(fields: [storeId], references: [id])

  @@map("users")
}

model Store {
  id            String         @id @default(uuid())
  name          String
  description   String?
  phoneNumber   String
  status        StatusEnum
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Invoice       Invoice[]
  categories    Category[]
  notifications Notification[]
  products      Product[]
  users         User[]

  @@map("stores")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]

  @@map("categories")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  buyPrice    Int
  sellPrice   Int
  stock       Int        @default(0)
  description String?
  expiration  DateTime?
  minStock    Int?
  categoryId  String
  storeId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  movements   Movement[]
  category    Category   @relation(fields: [categoryId], references: [id])
  store       Store?     @relation(fields: [storeId], references: [id])

  @@map("products")
}

model Movement {
  id        String       @id @default(uuid())
  type      MovementType
  quantity  Int
  productId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Product      @relation(fields: [productId], references: [id])

  @@map("movements")
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  storeId   String
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  store     Store            @relation(fields: [storeId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Expense {
  id          String   @id
  description String
  amount      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Income {
  id          String   @id
  description String
  amount      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Invoice {
  id            String        @id
  invoiceNumber String        @unique
  date          DateTime      @default(now())
  totalAmount   Int
  storeId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  stores        Store         @relation(fields: [storeId], references: [id])
  InvoiceItem   InvoiceItem[]
}

model InvoiceItem {
  id          String  @id
  description String
  quantity    Int
  price       Int
  invoiceId   String
  Invoice     Invoice @relation(fields: [invoiceId], references: [id])
}

enum StatusEnum {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  VENDOR
  STOCK_MANAGER
  ADMIN
  SUPER_ADMIN
}

enum MovementType {
  PURCHASE
  RETURN
  TRANSFER_IN
  SALE
  DEFECTIVE
  TRANSFER_OUT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
