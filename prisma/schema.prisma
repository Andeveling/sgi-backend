generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  cellphone     String         @unique
  password      String
  roles         Role[]         @default([USER])
  isNew         Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  storeId       String?
  store         Store?         @relation(fields: [storeId], references: [id])

  @@map("users")
}

model Store {
  id          String     @id @default(cuid())
  name        String
  description String?
  cellphone   String
  address     String
  status      StatusEnum @default(ACTIVE)

  orders        Order[]
  categories    Category[]
  notifications Notification[]
  products      Product[]
  users         User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stores")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  buyPrice    Int
  sellPrice   Int
  stock       Int        @default(0)
  description String?
  expiration  DateTime?
  maxStock    Int        @default(10)
  minStock    Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  movements   Movement[]

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  orderItems OrderItem[]

  @@map("products")
}

model Customer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  cellphone      String   @unique
  identification String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orders         Order[]

  @@map("customers")
}

model Movement {
  id        String       @id @default(cuid())
  type      MovementType
  quantity  Int
  productId String
  product   Product      @relation(fields: [productId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("movements")
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)
  storeId String
  userId  String
  store   Store            @relation(fields: [storeId], references: [id])
  user    User             @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber Int         @unique @default(autoincrement())
  date        DateTime    @default(now())
  totalAmount Float
  status      OrderStatus @default(PENDING)

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float

  productId String
  orderId   String

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  FULFILLED
  CANCELLED
}

enum StatusEnum {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  VENDOR
  STOCK_MANAGER
  ADMIN
  SUPER_ADMIN
}

enum MovementType {
  INITIAL_STOCK // When a product is created, a movement is created with this type
  PURCHASE      // When a order is created, a movement is created with this type
  SALE          // When a product is sold, a movement is created with this type
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
